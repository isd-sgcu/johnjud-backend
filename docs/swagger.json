{
    "schemes": [
        "https",
        "http"
    ],
    "swagger": "2.0",
    "info": {
        "description": "# Johnjud API",
        "title": "JohnJud API",
        "contact": {
            "name": "ISD Team",
            "email": "sd.team.sgcu@gmail.com"
        },
        "version": "1.0"
    },
    "paths": {
        "/v1/auth/forgot-password": {
            "post": {
                "description": "Return isSuccess",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Forgot Password",
                "parameters": [
                    {
                        "description": "forgotPassword request dto",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.ForgotPasswordRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.ForgotPasswordResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid email",
                        "schema": {
                            "$ref": "#/definitions/dto.ResponseBadRequestErr"
                        }
                    },
                    "500": {
                        "description": "Internal service error",
                        "schema": {
                            "$ref": "#/definitions/dto.ResponseInternalErr"
                        }
                    },
                    "503": {
                        "description": "Service is down",
                        "schema": {
                            "$ref": "#/definitions/dto.ResponseServiceDownErr"
                        }
                    }
                }
            }
        },
        "/v1/auth/refreshToken": {
            "post": {
                "description": "Return the credential",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Refresh token",
                "parameters": [
                    {
                        "description": "refreshToken request dto",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.RefreshTokenRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.Credential"
                        }
                    },
                    "400": {
                        "description": "Invalid token",
                        "schema": {
                            "$ref": "#/definitions/dto.ResponseBadRequestErr"
                        }
                    },
                    "401": {
                        "description": "Invalid token",
                        "schema": {
                            "$ref": "#/definitions/dto.ResponseUnauthorizedErr"
                        }
                    },
                    "500": {
                        "description": "Internal service error",
                        "schema": {
                            "$ref": "#/definitions/dto.ResponseInternalErr"
                        }
                    },
                    "503": {
                        "description": "Service is down",
                        "schema": {
                            "$ref": "#/definitions/dto.ResponseServiceDownErr"
                        }
                    }
                }
            }
        },
        "/v1/auth/reset-password": {
            "put": {
                "description": "Return isSuccess",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Reset Password",
                "parameters": [
                    {
                        "description": "resetPassword request dto",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.ResetPasswordRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.ResetPasswordResponse"
                        }
                    },
                    "400": {
                        "description": "Forbidden the same password",
                        "schema": {
                            "$ref": "#/definitions/dto.ResponseBadRequestErr"
                        }
                    },
                    "500": {
                        "description": "Internal service error",
                        "schema": {
                            "$ref": "#/definitions/dto.ResponseInternalErr"
                        }
                    },
                    "503": {
                        "description": "Service is down",
                        "schema": {
                            "$ref": "#/definitions/dto.ResponseServiceDownErr"
                        }
                    }
                }
            }
        },
        "/v1/auth/signin": {
            "post": {
                "description": "Return the credential of user including access token and refresh token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Sign in user",
                "parameters": [
                    {
                        "description": "signIn request dto",
                        "name": "signIn",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.SignInRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/dto.Credential"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/dto.ResponseBadRequestErr"
                        }
                    },
                    "403": {
                        "description": "Incorrect email or password",
                        "schema": {
                            "$ref": "#/definitions/dto.ResponseForbiddenErr"
                        }
                    },
                    "500": {
                        "description": "Internal service error",
                        "schema": {
                            "$ref": "#/definitions/dto.ResponseInternalErr"
                        }
                    },
                    "503": {
                        "description": "Service is down",
                        "schema": {
                            "$ref": "#/definitions/dto.ResponseServiceDownErr"
                        }
                    }
                }
            }
        },
        "/v1/auth/signout": {
            "post": {
                "description": "Return the bool value of success",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Sign out user",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.SignOutResponse"
                        }
                    },
                    "401": {
                        "description": "Invalid token",
                        "schema": {
                            "$ref": "#/definitions/dto.ResponseUnauthorizedErr"
                        }
                    },
                    "500": {
                        "description": "Internal service error",
                        "schema": {
                            "$ref": "#/definitions/dto.ResponseInternalErr"
                        }
                    },
                    "503": {
                        "description": "Service is down",
                        "schema": {
                            "$ref": "#/definitions/dto.ResponseServiceDownErr"
                        }
                    }
                }
            }
        },
        "/v1/auth/signup": {
            "post": {
                "description": "Return the data of user if successfully",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Signup user",
                "parameters": [
                    {
                        "description": "signup request dto",
                        "name": "signup",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.SignupRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/dto.SignupResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/dto.ResponseBadRequestErr"
                        }
                    },
                    "409": {
                        "description": "Duplicate email",
                        "schema": {
                            "$ref": "#/definitions/dto.ResponseConflictErr"
                        }
                    },
                    "500": {
                        "description": "Internal service error",
                        "schema": {
                            "$ref": "#/definitions/dto.ResponseInternalErr"
                        }
                    },
                    "503": {
                        "description": "Service is down",
                        "schema": {
                            "$ref": "#/definitions/dto.ResponseServiceDownErr"
                        }
                    }
                }
            }
        },
        "/v1/images": {
            "post": {
                "description": "Returns the data of image. If updating pet, add petId. If creating pet, petId is not specified, but keep the imageId.",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "image"
                ],
                "summary": "Upload image",
                "parameters": [
                    {
                        "description": "upload image request dto",
                        "name": "image",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UploadImageRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/dto.ImageResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/dto.ResponseBadRequestErr"
                        }
                    },
                    "500": {
                        "description": "Internal service error",
                        "schema": {
                            "$ref": "#/definitions/dto.ResponseInternalErr"
                        }
                    },
                    "503": {
                        "description": "Service is down",
                        "schema": {
                            "$ref": "#/definitions/dto.ResponseServiceDownErr"
                        }
                    }
                }
            }
        },
        "/v1/images/{id}": {
            "delete": {
                "description": "Returns status of deleting image",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "image"
                ],
                "summary": "Delete image",
                "parameters": [
                    {
                        "type": "string",
                        "description": "image id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.DeleteResponse"
                        }
                    },
                    "500": {
                        "description": "Internal service error",
                        "schema": {
                            "$ref": "#/definitions/dto.ResponseInternalErr"
                        }
                    },
                    "503": {
                        "description": "Service is down",
                        "schema": {
                            "$ref": "#/definitions/dto.ResponseServiceDownErr"
                        }
                    }
                }
            }
        },
        "/v1/pets/": {
            "get": {
                "description": "Returns the data of pets if successful",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "pet"
                ],
                "summary": "finds all pets",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dto.PetResponse"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal service error",
                        "schema": {
                            "$ref": "#/definitions/dto.ResponseInternalErr"
                        }
                    },
                    "503": {
                        "description": "Service is down",
                        "schema": {
                            "$ref": "#/definitions/dto.ResponseServiceDownErr"
                        }
                    }
                }
            }
        },
        "/v1/pets/admin": {
            "get": {
                "description": "Returns the data of pets if successful",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "pet"
                ],
                "summary": "finds all pets",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dto.PetResponse"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal service error",
                        "schema": {
                            "$ref": "#/definitions/dto.ResponseInternalErr"
                        }
                    },
                    "503": {
                        "description": "Service is down",
                        "schema": {
                            "$ref": "#/definitions/dto.ResponseServiceDownErr"
                        }
                    }
                }
            }
        },
        "/v1/pets/create": {
            "post": {
                "description": "Returns the data of pet if successful",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "pet"
                ],
                "summary": "creates pet",
                "parameters": [
                    {
                        "description": "pet dto",
                        "name": "create",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CreatePetRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/dto.PetResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/dto.ResponseBadRequestErr"
                        }
                    },
                    "500": {
                        "description": "Internal service error",
                        "schema": {
                            "$ref": "#/definitions/dto.ResponseInternalErr"
                        }
                    },
                    "503": {
                        "description": "Service is down",
                        "schema": {
                            "$ref": "#/definitions/dto.ResponseServiceDownErr"
                        }
                    }
                }
            }
        },
        "/v1/pets/{id}": {
            "get": {
                "description": "Returns the data of a pet if successful",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "pet"
                ],
                "summary": "finds one pet",
                "parameters": [
                    {
                        "type": "string",
                        "description": "pet id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.PetResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/dto.ResponseBadRequestErr"
                        }
                    },
                    "500": {
                        "description": "Internal service error",
                        "schema": {
                            "$ref": "#/definitions/dto.ResponseInternalErr"
                        }
                    },
                    "503": {
                        "description": "Service is down",
                        "schema": {
                            "$ref": "#/definitions/dto.ResponseServiceDownErr"
                        }
                    }
                }
            },
            "put": {
                "description": "Returns the data of pet if successfully",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "pet"
                ],
                "summary": "updates pet",
                "parameters": [
                    {
                        "description": "update pet dto",
                        "name": "update",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UpdatePetRequest"
                        }
                    },
                    {
                        "type": "string",
                        "description": "pet id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/dto.PetResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/dto.ResponseBadRequestErr"
                        }
                    },
                    "500": {
                        "description": "Internal service error",
                        "schema": {
                            "$ref": "#/definitions/dto.ResponseInternalErr"
                        }
                    },
                    "503": {
                        "description": "Service is down",
                        "schema": {
                            "$ref": "#/definitions/dto.ResponseServiceDownErr"
                        }
                    }
                }
            },
            "delete": {
                "description": "Returns successful status if pet is successfully deleted",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "pet"
                ],
                "summary": "deletes pet",
                "parameters": [
                    {
                        "type": "string",
                        "description": "pet id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/dto.DeleteResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/dto.ResponseBadRequestErr"
                        }
                    },
                    "500": {
                        "description": "Internal service error",
                        "schema": {
                            "$ref": "#/definitions/dto.ResponseInternalErr"
                        }
                    },
                    "503": {
                        "description": "Service is down",
                        "schema": {
                            "$ref": "#/definitions/dto.ResponseServiceDownErr"
                        }
                    }
                }
            }
        },
        "/v1/pets/{id}/adopt": {
            "put": {
                "description": "Return true if the pet is successfully adopted",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "pet"
                ],
                "summary": "Change a pet's adoptBy status",
                "parameters": [
                    {
                        "description": "adopt pet dto",
                        "name": "adoptDto",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.AdoptByRequest"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Pet ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/dto.AdoptByResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/dto.ResponseBadRequestErr"
                        }
                    },
                    "500": {
                        "description": "Internal service error",
                        "schema": {
                            "$ref": "#/definitions/dto.ResponseInternalErr"
                        }
                    },
                    "503": {
                        "description": "Service is down",
                        "schema": {
                            "$ref": "#/definitions/dto.ResponseServiceDownErr"
                        }
                    }
                }
            }
        },
        "/v1/pets/{id}/visible": {
            "put": {
                "description": "Returns successful status if pet's IsVisible is successfully changed",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "pet"
                ],
                "summary": "changes pet's public visiblility",
                "parameters": [
                    {
                        "description": "changeView pet dto",
                        "name": "changeViewDto",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.ChangeViewPetRequest"
                        }
                    },
                    {
                        "type": "string",
                        "description": "pet id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/dto.ChangeViewPetResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/dto.ResponseBadRequestErr"
                        }
                    },
                    "500": {
                        "description": "Internal service error",
                        "schema": {
                            "$ref": "#/definitions/dto.ResponseInternalErr"
                        }
                    },
                    "503": {
                        "description": "Service is down",
                        "schema": {
                            "$ref": "#/definitions/dto.ResponseServiceDownErr"
                        }
                    }
                }
            }
        },
        "/v1/users": {
            "put": {
                "description": "Returns the data of user if successfully",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "updates user",
                "parameters": [
                    {
                        "description": "update user dto",
                        "name": "update",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UpdateUserRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/dto.User"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/dto.ResponseBadRequestErr"
                        }
                    },
                    "500": {
                        "description": "Internal service error",
                        "schema": {
                            "$ref": "#/definitions/dto.ResponseInternalErr"
                        }
                    },
                    "503": {
                        "description": "Service is down",
                        "schema": {
                            "$ref": "#/definitions/dto.ResponseServiceDownErr"
                        }
                    }
                }
            }
        },
        "/v1/users/{id}": {
            "get": {
                "description": "Returns the data of user if successful",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "finds one user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "user id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.User"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/dto.ResponseBadRequestErr"
                        }
                    },
                    "500": {
                        "description": "Internal service error",
                        "schema": {
                            "$ref": "#/definitions/dto.ResponseInternalErr"
                        }
                    },
                    "503": {
                        "description": "Service is down",
                        "schema": {
                            "$ref": "#/definitions/dto.ResponseServiceDownErr"
                        }
                    }
                }
            },
            "delete": {
                "description": "Returns successful status if user is successfully deleted",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "deletes user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "user id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/dto.DeleteUserResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/dto.ResponseBadRequestErr"
                        }
                    },
                    "500": {
                        "description": "Internal service error",
                        "schema": {
                            "$ref": "#/definitions/dto.ResponseInternalErr"
                        }
                    },
                    "503": {
                        "description": "Service is down",
                        "schema": {
                            "$ref": "#/definitions/dto.ResponseServiceDownErr"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "constant.Gender": {
            "type": "string",
            "enum": [
                "male",
                "female"
            ],
            "x-enum-varnames": [
                "MALE",
                "FEMALE"
            ]
        },
        "constant.Status": {
            "type": "string",
            "enum": [
                "adopted",
                "findhome"
            ],
            "x-enum-varnames": [
                "ADOPTED",
                "FINDHOME"
            ]
        },
        "dto.AdoptByRequest": {
            "type": "object",
            "required": [
                "user_id"
            ],
            "properties": {
                "user_id": {
                    "type": "string"
                }
            }
        },
        "dto.AdoptByResponse": {
            "type": "object",
            "properties": {
                "success": {
                    "type": "boolean"
                }
            }
        },
        "dto.BadReqErrResponse": {
            "type": "object",
            "properties": {
                "failed_field": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "value": {}
            }
        },
        "dto.ChangeViewPetRequest": {
            "type": "object",
            "properties": {
                "visible": {
                    "type": "boolean"
                }
            }
        },
        "dto.ChangeViewPetResponse": {
            "type": "object",
            "properties": {
                "success": {
                    "type": "boolean"
                }
            }
        },
        "dto.CreatePetRequest": {
            "type": "object",
            "required": [
                "birthdate",
                "color",
                "gender",
                "habit",
                "is_sterile",
                "is_vaccinated",
                "is_visible",
                "name",
                "origin",
                "pattern",
                "status",
                "type"
            ],
            "properties": {
                "birthdate": {
                    "type": "string"
                },
                "caption": {
                    "type": "string"
                },
                "color": {
                    "type": "string"
                },
                "contact": {
                    "type": "string"
                },
                "gender": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/constant.Gender"
                        }
                    ],
                    "example": "male"
                },
                "habit": {
                    "type": "string"
                },
                "images": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "is_sterile": {
                    "type": "boolean"
                },
                "is_vaccinated": {
                    "type": "boolean"
                },
                "is_visible": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "origin": {
                    "type": "string"
                },
                "owner": {
                    "type": "string"
                },
                "pattern": {
                    "type": "string"
                },
                "status": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/constant.Status"
                        }
                    ],
                    "example": "findhome"
                },
                "tel": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "dto.Credential": {
            "type": "object",
            "properties": {
                "access_token": {
                    "type": "string",
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJodHRwczovL3BiZX..."
                },
                "expires_in": {
                    "type": "integer",
                    "example": 3600
                },
                "refresh_token": {
                    "type": "string",
                    "example": "e7e84d54-7518-4..."
                }
            }
        },
        "dto.DeleteResponse": {
            "type": "object",
            "properties": {
                "success": {
                    "type": "boolean"
                }
            }
        },
        "dto.DeleteUserResponse": {
            "type": "object",
            "properties": {
                "success": {
                    "type": "boolean"
                }
            }
        },
        "dto.ForgotPasswordRequest": {
            "type": "object",
            "required": [
                "email"
            ],
            "properties": {
                "email": {
                    "type": "string"
                }
            }
        },
        "dto.ForgotPasswordResponse": {
            "type": "object",
            "properties": {
                "is_success": {
                    "type": "boolean"
                }
            }
        },
        "dto.ImageResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "object_key": {
                    "type": "string"
                },
                "pet_id": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                }
            }
        },
        "dto.PetResponse": {
            "type": "object",
            "properties": {
                "birthdate": {
                    "type": "string"
                },
                "caption": {
                    "type": "string"
                },
                "color": {
                    "type": "string"
                },
                "contact": {
                    "type": "string"
                },
                "gender": {
                    "$ref": "#/definitions/constant.Gender"
                },
                "habit": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "images": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.ImageResponse"
                    }
                },
                "is_sterile": {
                    "type": "boolean"
                },
                "is_vaccinated": {
                    "type": "boolean"
                },
                "is_visible": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "origin": {
                    "type": "string"
                },
                "owner": {
                    "type": "string"
                },
                "pattern": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/constant.Status"
                },
                "tel": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "dto.RefreshTokenRequest": {
            "type": "object",
            "required": [
                "refresh_token"
            ],
            "properties": {
                "refresh_token": {
                    "type": "string"
                }
            }
        },
        "dto.ResetPasswordRequest": {
            "type": "object",
            "required": [
                "password",
                "token"
            ],
            "properties": {
                "password": {
                    "type": "string",
                    "maxLength": 30,
                    "minLength": 6
                },
                "token": {
                    "type": "string"
                }
            }
        },
        "dto.ResetPasswordResponse": {
            "type": "object",
            "properties": {
                "is_success": {
                    "type": "boolean"
                }
            }
        },
        "dto.ResponseBadRequestErr": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.BadReqErrResponse"
                    }
                },
                "message": {
                    "type": "string",
                    "example": "Invalid request body"
                },
                "status_code": {
                    "type": "integer",
                    "example": 400
                }
            }
        },
        "dto.ResponseConflictErr": {
            "type": "object",
            "properties": {
                "data": {},
                "message": {
                    "type": "string",
                    "example": "Conflict"
                },
                "status_code": {
                    "type": "integer",
                    "example": 409
                }
            }
        },
        "dto.ResponseForbiddenErr": {
            "type": "object",
            "properties": {
                "data": {},
                "message": {
                    "type": "string",
                    "example": "Insufficiency permission"
                },
                "status_code": {
                    "type": "integer",
                    "example": 403
                }
            }
        },
        "dto.ResponseInternalErr": {
            "type": "object",
            "properties": {
                "data": {},
                "message": {
                    "type": "string",
                    "example": "Internal service error"
                },
                "status_code": {
                    "type": "integer",
                    "example": 500
                }
            }
        },
        "dto.ResponseServiceDownErr": {
            "type": "object",
            "properties": {
                "data": {},
                "message": {
                    "type": "string",
                    "example": "Service is down"
                },
                "status_code": {
                    "type": "integer",
                    "example": 503
                }
            }
        },
        "dto.ResponseUnauthorizedErr": {
            "type": "object",
            "properties": {
                "data": {},
                "message": {
                    "type": "string",
                    "example": "Invalid token"
                },
                "status_code": {
                    "type": "integer",
                    "example": 401
                }
            }
        },
        "dto.SignInRequest": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "maxLength": 30,
                    "minLength": 6
                }
            }
        },
        "dto.SignOutResponse": {
            "type": "object",
            "properties": {
                "is_success": {
                    "type": "boolean"
                }
            }
        },
        "dto.SignupRequest": {
            "type": "object",
            "required": [
                "email",
                "firstname",
                "lastname",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "firstname": {
                    "type": "string"
                },
                "lastname": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "maxLength": 30,
                    "minLength": 6
                }
            }
        },
        "dto.SignupResponse": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "firstname": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "lastname": {
                    "type": "string"
                }
            }
        },
        "dto.UpdatePetRequest": {
            "type": "object",
            "properties": {
                "birthdate": {
                    "type": "string"
                },
                "caption": {
                    "type": "string"
                },
                "color": {
                    "type": "string"
                },
                "contact": {
                    "type": "string"
                },
                "gender": {
                    "$ref": "#/definitions/constant.Gender"
                },
                "habit": {
                    "type": "string"
                },
                "images": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "is_sterile": {
                    "type": "boolean"
                },
                "is_vaccinated": {
                    "type": "boolean"
                },
                "is_visible": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "origin": {
                    "type": "string"
                },
                "owner": {
                    "type": "string"
                },
                "pattern": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/constant.Status"
                },
                "tel": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "dto.UpdateUserRequest": {
            "type": "object",
            "required": [
                "email",
                "firstname",
                "lastname",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "firstname": {
                    "type": "string"
                },
                "lastname": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "maxLength": 30,
                    "minLength": 6
                }
            }
        },
        "dto.UploadImageRequest": {
            "type": "object",
            "required": [
                "file",
                "filename"
            ],
            "properties": {
                "file": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "filename": {
                    "type": "string"
                },
                "pet_id": {
                    "type": "string"
                }
            }
        },
        "dto.User": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "firstname": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "lastname": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "AuthToken": {
            "description": "Description for what is this security definition being used",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    },
    "tags": [
        {
            "description": "# Auth Tag API Documentation\n**Auth** functions goes here",
            "name": "auth"
        },
        {
            "description": "# Image Tag API Documentation\n**Image** functions goes here",
            "name": "image"
        },
        {
            "description": "# Pet Tag API Documentation\n**Pet** functions goes here",
            "name": "pet"
        },
        {
            "description": "# User Tag API Documentation\n**User** functions goes here",
            "name": "user"
        }
    ]
}