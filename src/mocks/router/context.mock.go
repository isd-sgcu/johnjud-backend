// Code generated by MockGen. DO NOT EDIT.
// Source: ./src/app/router/context.go

// Package mock_router is a generated GoMock package.
package mock_router

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIContext is a mock of IContext interface.
type MockIContext struct {
	ctrl     *gomock.Controller
	recorder *MockIContextMockRecorder
}

// MockIContextMockRecorder is the mock recorder for MockIContext.
type MockIContextMockRecorder struct {
	mock *MockIContext
}

// NewMockIContext creates a new mock instance.
func NewMockIContext(ctrl *gomock.Controller) *MockIContext {
	mock := &MockIContext{ctrl: ctrl}
	mock.recorder = &MockIContextMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIContext) EXPECT() *MockIContextMockRecorder {
	return m.recorder
}

// Bind mocks base method.
func (m *MockIContext) Bind(arg0 any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Bind", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Bind indicates an expected call of Bind.
func (mr *MockIContextMockRecorder) Bind(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bind", reflect.TypeOf((*MockIContext)(nil).Bind), arg0)
}

// ID mocks base method.
func (m *MockIContext) ID() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ID indicates an expected call of ID.
func (mr *MockIContextMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockIContext)(nil).ID))
}

// IsAuth mocks base method.
func (m *MockIContext) IsAuth() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAuth")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsAuth indicates an expected call of IsAuth.
func (mr *MockIContextMockRecorder) IsAuth() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAuth", reflect.TypeOf((*MockIContext)(nil).IsAuth))
}

// JSON mocks base method.
func (m *MockIContext) JSON(arg0 int, arg1 any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "JSON", arg0, arg1)
}

// JSON indicates an expected call of JSON.
func (mr *MockIContextMockRecorder) JSON(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JSON", reflect.TypeOf((*MockIContext)(nil).JSON), arg0, arg1)
}

// Method mocks base method.
func (m *MockIContext) Method() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Method")
	ret0, _ := ret[0].(string)
	return ret0
}

// Method indicates an expected call of Method.
func (mr *MockIContextMockRecorder) Method() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Method", reflect.TypeOf((*MockIContext)(nil).Method))
}

// Next mocks base method.
func (m *MockIContext) Next() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next")
	ret0, _ := ret[0].(error)
	return ret0
}

// Next indicates an expected call of Next.
func (mr *MockIContextMockRecorder) Next() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockIContext)(nil).Next))
}

// Param mocks base method.
func (m *MockIContext) Param(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Param", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Param indicates an expected call of Param.
func (mr *MockIContextMockRecorder) Param(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Param", reflect.TypeOf((*MockIContext)(nil).Param), arg0)
}

// Path mocks base method.
func (m *MockIContext) Path() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Path")
	ret0, _ := ret[0].(string)
	return ret0
}

// Path indicates an expected call of Path.
func (mr *MockIContextMockRecorder) Path() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Path", reflect.TypeOf((*MockIContext)(nil).Path))
}

// StoreValue mocks base method.
func (m *MockIContext) StoreValue(arg0, arg1 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StoreValue", arg0, arg1)
}

// StoreValue indicates an expected call of StoreValue.
func (mr *MockIContextMockRecorder) StoreValue(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreValue", reflect.TypeOf((*MockIContext)(nil).StoreValue), arg0, arg1)
}

// Token mocks base method.
func (m *MockIContext) Token() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Token")
	ret0, _ := ret[0].(string)
	return ret0
}

// Token indicates an expected call of Token.
func (mr *MockIContextMockRecorder) Token() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Token", reflect.TypeOf((*MockIContext)(nil).Token))
}

// UserID mocks base method.
func (m *MockIContext) UserID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserID")
	ret0, _ := ret[0].(string)
	return ret0
}

// UserID indicates an expected call of UserID.
func (mr *MockIContextMockRecorder) UserID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserID", reflect.TypeOf((*MockIContext)(nil).UserID))
}
