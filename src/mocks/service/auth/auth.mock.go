// Code generated by MockGen. DO NOT EDIT.
// Source: ./src/pkg/service/auth/auth.service.go

// Package mock_auth is a generated GoMock package.
package mock_auth

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	dto "github.com/isd-sgcu/johnjud-gateway/src/app/dto"
	v1 "github.com/isd-sgcu/johnjud-go-proto/johnjud/auth/auth/v1"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// RefreshToken mocks base method.
func (m *MockService) RefreshToken(arg0 string) (*v1.Credential, *dto.ResponseErr) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshToken", arg0)
	ret0, _ := ret[0].(*v1.Credential)
	ret1, _ := ret[1].(*dto.ResponseErr)
	return ret0, ret1
}

// RefreshToken indicates an expected call of RefreshToken.
func (mr *MockServiceMockRecorder) RefreshToken(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshToken", reflect.TypeOf((*MockService)(nil).RefreshToken), arg0)
}

// SignIn mocks base method.
func (m *MockService) SignIn(arg0 *dto.SignIn) (*v1.Credential, *dto.ResponseErr) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignIn", arg0)
	ret0, _ := ret[0].(*v1.Credential)
	ret1, _ := ret[1].(*dto.ResponseErr)
	return ret0, ret1
}

// SignIn indicates an expected call of SignIn.
func (mr *MockServiceMockRecorder) SignIn(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignIn", reflect.TypeOf((*MockService)(nil).SignIn), arg0)
}

// SignOut mocks base method.
func (m *MockService) SignOut(arg0 string) (bool, *dto.ResponseErr) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignOut", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*dto.ResponseErr)
	return ret0, ret1
}

// SignOut indicates an expected call of SignOut.
func (mr *MockServiceMockRecorder) SignOut(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignOut", reflect.TypeOf((*MockService)(nil).SignOut), arg0)
}

// Signup mocks base method.
func (m *MockService) Signup(arg0 *dto.SignupRequest) (*dto.SignupResponse, *dto.ResponseErr) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Signup", arg0)
	ret0, _ := ret[0].(*dto.SignupResponse)
	ret1, _ := ret[1].(*dto.ResponseErr)
	return ret0, ret1
}

// Signup indicates an expected call of Signup.
func (mr *MockServiceMockRecorder) Signup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Signup", reflect.TypeOf((*MockService)(nil).Signup), arg0)
}

// Validate mocks base method.
func (m *MockService) Validate(arg0 string) (*dto.TokenPayloadAuth, *dto.ResponseErr) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate", arg0)
	ret0, _ := ret[0].(*dto.TokenPayloadAuth)
	ret1, _ := ret[1].(*dto.ResponseErr)
	return ret0, ret1
}

// Validate indicates an expected call of Validate.
func (mr *MockServiceMockRecorder) Validate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockService)(nil).Validate), arg0)
}
