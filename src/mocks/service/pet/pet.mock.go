// Code generated by MockGen. DO NOT EDIT.
// Source: ./src/pkg/service/pet/pet.service.go

// Package mock_pet is a generated GoMock package.
package mock_pet

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	dto "github.com/isd-sgcu/johnjud-gateway/src/app/dto"
	v1 "github.com/isd-sgcu/johnjud-go-proto/johnjud/backend/pet/v1"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// ChangeView mocks base method.
func (m *MockService) ChangeView(id string, in *dto.ChangeViewPetRequest) (bool, *dto.ResponseErr) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeView", id, in)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*dto.ResponseErr)
	return ret0, ret1
}

// ChangeView indicates an expected call of ChangeView.
func (mr *MockServiceMockRecorder) ChangeView(id, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeView", reflect.TypeOf((*MockService)(nil).ChangeView), id, in)
}

// Create mocks base method.
func (m *MockService) Create(in *dto.CreatePetRequest) (*v1.Pet, *dto.ResponseErr) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", in)
	ret0, _ := ret[0].(*v1.Pet)
	ret1, _ := ret[1].(*dto.ResponseErr)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockServiceMockRecorder) Create(in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockService)(nil).Create), in)
}

// Delete mocks base method.
func (m *MockService) Delete(id string) (bool, *dto.ResponseErr) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*dto.ResponseErr)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockServiceMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockService)(nil).Delete), id)
}

// FindAll mocks base method.
func (m *MockService) FindAll() ([]*v1.Pet, *dto.ResponseErr) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll")
	ret0, _ := ret[0].([]*v1.Pet)
	ret1, _ := ret[1].(*dto.ResponseErr)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockServiceMockRecorder) FindAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockService)(nil).FindAll))
}

// FindOne mocks base method.
func (m *MockService) FindOne(id string) (*v1.Pet, *dto.ResponseErr) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOne", id)
	ret0, _ := ret[0].(*v1.Pet)
	ret1, _ := ret[1].(*dto.ResponseErr)
	return ret0, ret1
}

// FindOne indicates an expected call of FindOne.
func (mr *MockServiceMockRecorder) FindOne(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOne", reflect.TypeOf((*MockService)(nil).FindOne), id)
}

// Update mocks base method.
func (m *MockService) Update(id string, in *dto.UpdatePetRequest) (*v1.Pet, *dto.ResponseErr) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", id, in)
	ret0, _ := ret[0].(*v1.Pet)
	ret1, _ := ret[1].(*dto.ResponseErr)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockServiceMockRecorder) Update(id, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockService)(nil).Update), id, in)
}
